version: 2.1

# These "CircleCI Orbs" are reusable bits of configuration that can be shared
# across projects.  See https://circleci.com/orbs/ for more information.
orbs:
  # `oss` is a local reference to the package.  The source for Apollo Orbs can
  # be found at http://github.com/apollographql/CircleCI-Orbs.
  oss: apollo/oss-ci-cd-tooling@0.0.5

# commands:
# These are the steps used for each version of Node which we're testing
# against.  Thanks to YAMLs inability to merge arrays (though it is able
# to merge objects), every version of Node must use the exact same steps,
# or these steps would need to be repeated in a version of Node that needs
# something different.  Probably best to avoid that, out of principle, though.
# common_test_steps:
#   description: Commands to run on every Node.js environment
#   steps:
#     - oss/install_specific_npm_version
#     - checkout
#     - oss/npm_clean_install_with_caching
#     - run: npm run test:ci

# Important! When adding a new job to `jobs`, make sure to define when it
# executes by also adding it to the `workflows` section below!
jobs:
  Filesize:
    executor: { name: oss/node, tag: '10' }
    steps:
      - oss/install_specific_npm_version
      - checkout
      - oss/npm_clean_install_with_caching
      - run: npm run bundlesize

  Tests:
    executor: { name: oss/node, tag: '10' }
    steps:
      - oss/install_specific_npm_version
      - checkout
      - oss/npm_clean_install_with_caching
      # We will save the results of this one particular invocation to use in
      # the publish step. Not only does this make the publishing step take less
      # time, this also ensures that a passing version gets deployed even if,
      # theoretically, rebuilding the same commit on the same version of
      # Node.js should yield the same results!
      - persist_to_workspace:
          root: .
          paths:
            - ./**
      - run:
          name: Jest suite with coverage
          command: npm run test:ci && npm run coverage:upload
          environment:
            JEST_JUNIT_OUTPUT: 'reports/junit/js-test-results.xml'
      - store_test_results:
          path: reports/junit
      - store_artifacts:
          path: reports/junit

  build_tarballs:
    executor: { name: 'oss/node', tag: '10' }
    steps:
      # We attach the workspace and just run with it, with no other guide.
      # Maybe not the most reusable pattern, but also the most common case.
      - attach_workspace:
          at: .
      - oss/write_verdaccio_config
      - oss/start_verdaccio
      - run:
          name: Publish to (local) Verdaccio
          command: |
            npm set registry http://localhost:4873/
            DEBUG=npm release \
              --no-git-tag-version \
              --no-push \
              --yes \
      - store_artifacts:
          path: ~/.config/verdaccio/storage/
          destination: packed

common_non_publish_filters: &common_non_publish_filters
  filters:
    # Ensure every job has `tags` filters since the publish steps have tags.
    # This is some wild configuration thing that's pretty hard to figure out.
    tags:
      only: /.*/

common_publish_filters: &common_publish_filters
  filters:
    # Only run pre-publish and publish steps on specific tags.
    tags:
      only: /^publish\/[0-9]+$/
    # We want the publish to trigger on the above tag, not any branch.
    branches:
      ignore: /.*/

workflows:
  version: 2
  Build:
    jobs:
      - Filesize:
          <<: *common_non_publish_filters
      - Tests:
          <<: *common_non_publish_filters
      - build_tarballs:
          name: Package tarballs
          <<: *common_non_publish_filters
          requires:
            - Tests # Node 10
