version: 2.1

# These "CircleCI Orbs" are reusable bits of configuration that can be shared
# across projects.  See https://circleci.com/orbs/ for more information.
orbs:
  # `oss` is a local reference to the package.  The source for Apollo Orbs can
  # be found at http://github.com/apollographql/CircleCI-Orbs.
  oss: apollo/oss-ci-cd-tooling@0.0.5

commands:
  # These are the steps used for each version of Node which we're testing
  # against.  Thanks to YAMLs inability to merge arrays (though it is able
  # to merge objects), every version of Node must use the exact same steps,
  # or these steps would need to be repeated in a version of Node that needs
  # something different.  Probably best to avoid that, out of principle, though.
  common_test_steps:
    description: Commands to run on every Node.js environment
    steps:
      - oss/install_specific_npm_version
      - checkout
      - oss/npm_clean_install_with_caching
      - run: npm run circle

# Important! When adding a new job to `jobs`, make sure to define when it
# executes by also adding it to the `workflows` section below!
jobs:
  Filesize:
    executor: { name: oss/node, tag: '10' }
    steps:
      - checkout
      - restore_cache:
          keys:
            # When lock file changes, use increasingly general patterns to
            # restore cache
            - npm-v2-{{ .Branch }}-{{ checksum "package-lock.json" }}
            - npm-v2-{{ .Branch }}-
            - npm-v2-
      - run: npm --version
      - run: npm ci
      - save_cache:
          key: npm-v2-{{ .Branch }}-{{ checksum "package-lock.json" }}
          paths:
            # This should cache the npm cache instead of node_modules, which is
            # needed because npm ci actually removes node_modules before
            # installing to guarantee a clean slate.
            - ~/.npm
      - run: npm run bundlesize

  Tests:
    executor: { name: oss/node, tag: '10' }
    steps:
      - checkout
      - restore_cache:
          keys:
            # When lock file changes, use increasingly general patterns to
            # restore cache
            - npm-v2-{{ .Branch }}-{{ checksum "package-lock.json" }}
            - npm-v2-{{ .Branch }}-
            - npm-v2-
      - run: npm --version
      - run: npm ci
      - save_cache:
          key: npm-v2-{{ .Branch }}-{{ checksum "package-lock.json" }}
          paths:
            # This should cache the npm cache instead of node_modules, which is
            # needed because npm ci actually removes node_modules before
            # installing to guarantee a clean slate.
            - ~/.npm
      - run:
          name: Jest suite with coverage
          command: npm run test:ci && npm run coverage:upload
          environment:
            JEST_JUNIT_OUTPUT: 'reports/junit/js-test-results.xml'
      - store_test_results:
          path: reports/junit
      - store_artifacts:
          path: reports/junit

common_non_publish_filters: &common_non_publish_filters
  filters:
    # Ensure every job has `tags` filters since the publish steps have tags.
    # This is some wild configuration thing that's pretty hard to figure out.
    tags:
      only: /.*/

workflows:
  version: 2
  Build:
    jobs:
      - Filesize:
          <<: *common_non_publish_filters
      - Tests:
          <<: *common_non_publish_filters
